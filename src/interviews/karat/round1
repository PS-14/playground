/*
After catching your classroom students cheating before, you realize your students are getting craftier and hiding words in 2D grids of letters. The word may start anywhere in the grid, and consecutive letters can be either immediately below or immediately to the right of the previous letter.

Given a grid and a word, write a function that returns the location of the word in the grid as a list of coordinates. If there are multiple matches, return any one.

grid1 = [
    ['c', 'c', 't', 'n', 'a', 'x'],
    ['c', 'c', 'a', 't', 'n', 't'],
    ['a', 'c', 'n', 'n', 't', 't'],
    ['t', 'n', 'i', 'i', 'p', 'p'],
    ['a', 'o', 'o', 'o', 'a', 'a'],
    ['s', 'a', 'a', 'a', 'o', 'o'],
    ['k', 'a', 'i', 'o', 'k', 'i'],
]
word1 = "catnip"
word2 = "cccc"
word3 = "s"
word4 = "ant"
word5 = "aoi"
word6 = "ki"
word7 = "aaoo"
word8 = "ooo"

grid2 = [['a']]
word9 = "a"

find_word_location(grid1, word1) => [ (1, 1), (1, 2), (1, 3), (2, 3), (3, 3), (3, 4) ]
find_word_location(grid1, word2) =>
       [(0, 0), (1, 0), (1, 1), (2, 1)]
    OR [(0, 0), (0, 1), (1, 1), (2, 1)]
find_word_location(grid1, word3) => [(5, 0)]
find_word_location(grid1, word4) => [(0, 4), (1, 4), (2, 4)] OR [(0, 4), (1, 4), (1, 5)]
find_word_location(grid1, word5) => [(4, 5), (5, 5), (6, 5)]
find_word_location(grid1, word6) => [(6, 4), (6, 5)]
find_word_location(grid1, word7) => [(5, 2), (5, 3), (5, 4), (5, 5)]
find_word_location(grid1, word8) => [(4, 1), (4, 2), (4, 3)]
find_word_location(grid2, word9) => [(0, 0)]

Complexity analysis variables:

r = number of rows
c = number of columns
w = length of the word

*/


import java.io.*;
import java.util.*;

public class Solution {

/*
  time complexity=>  O(W*S)
  space complexity=> O(1)
*/
  public static String find(String[]words,String emebeded){
    int[]target=new int[26];
    for(int i=0;i<emebeded.length();i++){ // O(S)
      target[emebeded.charAt(i)-'a']++;
    }
    for(int i=0;i<words.length;i++){ // O(W*S)
      int[]source=new int[26];
      for(int j=0;j<words[i].length();j++){
         source[words[i].charAt(j)-'a']++;
      }
      if(contains(target,source)){
        return words[i];
      }
    }
    return null;
  }

  private static boolean contains(int[]target,int []source){
    for(int i=0;i<26;i++){
      if(target[i]<source[i]){
        return false;
      }
    }
    return true;
  }

  public static int[][] findWord(char[][]grid,String word){
     boolean[][]visited=new boolean[grid.length][grid[0].length];
     int[][]output=new int[word.length()][2];
     for(int i=0;i<grid.length;i++){
       for(int j=0;j<grid[i].length;j++){
         if(grid[i][j]==word.charAt(0)){
            visited[i][j]=true;
            if(dfs(grid,i,j,visited,word,output,0)){
               return output;
            }
            visited[i][j]=false;
         }
       }
     }
     return new int[0][0];
  }
  private static boolean dfs(char[][]grid,int i,int j,boolean[][]visited,String word,int[][]output,int index){

     output[index][0]=i;
     output[index][1]=j;
     index++;
     if(index==word.length()){
       return true;
     }
     if(j<grid[i].length&&!visited[i][j+1]&&word.charAt(index)==grid[i][j+1]){
        visited[i][j+1]=true;
        if(dfs(grid,i,j+1,visited,word,output,index)){
          return true;
        }
     }
     if(i<grid.length&&!visited[i+1][j]&&word.charAt(index)==grid[i+1][j]){
        visited[i+1][j]=true;
        if(dfs(grid,i+1,j,visited,word,output,index)){
          return true;
        }
     }
     return false;
  }

  public static void main(String[] argv) {
      char[][] grid1 = {
        {'c', 'c', 't', 'n', 'a', 'x'},
        {'c', 'c', 'a', 't', 'n', 't'},
        {'a', 'c', 'n', 'n', 't', 't'},
        {'t', 'n', 'i', 'i', 'p', 'p'},
        {'a', 'o', 'o', 'o', 'a', 'a'},
        {'s', 'a', 'a', 'a', 'o', 'o'},
        {'k', 'a', 'i', 'o', 'k', 'i'}
      };
      String word1 = "catnip";
      String word2 = "cccc";
      String word3 = "s";
      String word4 = "ant";
      String word5 = "aoi";
      String word6 = "ki";
      String word7 = "aaoo";
      String word8 = "ooo";

      char[][] grid2 = {{'a'}};
      String word9 = "a";

      int[][]output=findWord(grid1,word1);
      for(int i=0;i<output.length;i++){
      System.out.println(output[i][0]+":"+output[i][1]);
      }

      output=findWord(grid1,word2);
      System.out.println("############");
      for(int i=0;i<output.length;i++){
      System.out.println(output[i][0]+":"+output[i][1]);
      }

       output=findWord(grid1,word3);
      System.out.println("############");
      for(int i=0;i<output.length;i++){
      System.out.println(output[i][0]+":"+output[i][1]);
      }



  }
}
